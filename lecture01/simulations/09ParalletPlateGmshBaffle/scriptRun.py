# Imports the 'os' module to interact with the operating system.
import os  

# This line would clean the case directory by removing generated files from a previous simulation.
os.system('foamCleanCase')  

# Runs the OpenFOAM utility 'gmshToFoam' to convert the mesh generated by gmsh to OpenFOAM format.
# The msh file must be already placed in the directory from the geo file, from gmsh.
# This command creates a mesh that OpenFOAM can read.
# The mesh (named polymesh) is created in the constant folder.
os.system('gmshToFoam parallelPlateBaffle.msh')

# Creates baffles (chicanas) from existing patches in the mesh.
# The '-overwrite' flag ensures existing mesh files are replaced with the new mesh.
# Ensure the mesh has correctly defined patches for baffle creation.
os.system('createBaffles -overwrite')

# The converted mesh needs to be edited. 
# Here we use the OpenFOAM utility 'foamDictionary' to change the type of the boundaries.
# When the mesh is converted from gmsh, all entries are 'patch', which is suitable for inlet and outlet.
# We need to change the types of the empty faces and wall faces. 
os.system('foamDictionary constant/polyMesh/boundary -entry entry0/frontAndBack/type -set "empty"')
os.system('foamDictionary constant/polyMesh/boundary -entry entry0/topWall/type -set "wall"')
os.system('foamDictionary constant/polyMesh/boundary -entry entry0/bottomWall/type -set "wall"')

# Runs the OpenFOAM solver 'foamRun'.
os.system('foamRun')  

# Opens the case in ParaView using 'paraFoam' for visualization.
#os.system('paraFoam')  

